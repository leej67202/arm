{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "resourcePrefix": {
      "type": "string",
      "maxLength": 60,
      "defaultValue": "rg01",
      "metadata": {
      "description": "Vnet prefix"
      }
    },
      "functionAppNamePrefix": {
      "type": "string",
      "defaultValue": "funapp01"
  },
  "location": {
    "type": "string",
    "allowedValues": [
        "Australia East",
        "Australia Southeast",
        "Southeast Asia",
        "East Asia",
        "Japan East",
        "Japan West",
        "West Europe"
    ],
    "defaultValue": "[resourceGroup().location]"
  },
    "sourceCodeRepositoryURL": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
      "description": "Source code repository URL"
  },
    "sourceCodeBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Source code repository branch"
      }
   },
    "sourceCodeManualIntegration": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use 'true' if you are deploying from the base repo. Use 'false' if you are deploying from your own fork. If you use 'false', make sure that you have Administrator rights in the repo. If you get an error, manually add GitHub integration to another web app, to associate a GitHub access token with your Azure subscription."
    },
    "serviceTagDept": {
      "type": "string",
      "allowedValues": [
        "IT Ops",
        "IT Dev",
        "Finance",
        "Marketing",
        "Management",
        "Sales",
        "HR"
      ],
      "defaultValue": "IT Ops",
      "metadata": {
        "description": "Tag for Department"
    }
},
    "serviceTagEnvironment": {
      "type": "string",
      "allowedValues": [
        "Production",
        "Staging",
        "QA",
        "Development"
      ],
      "defaultValue": "Staging",
      "metadata": {
        "description": "Tag for Enviroment"
    }
  },
    "serviceTagDataProfile": {
      "type": "string",
      "allowedValues": [
        "Confidential",
        "Restricted",
        "Internal",
        "Public"
      ],
      "defaultValue": "Internal",
      "metadata": {
        "description": "Tag for sensitivity"
    }
  }
},
  "variables": {
    "resourcePrefix": "[parameters('resourcePrefix')]",
    "appName": "[concat(variables('resourcePrefix'), parameters('functionAppNamePrefix'))]",
    "lowerSiteName": "[toLower(parameters('functionAppName'))]",
    "storageAccountName": "[concat(variables('lowerSiteName'))]"
},
  "resources": [
  {
    "type": "Microsoft.Storage/storageAccounts",
    "name": "[variables('storageAccountName')]",
    "apiVersion": "2015-05-01-preview",
    "location": "[variables('storageLocation')]",
    "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
  },
  {
    "type": "Microsoft.Web/serverfarms",
    "apiVersion": "2015-04-01",
    "name": "[variables('hostingPlanName')]",
    "location": "[resourceGroup().location]",
    "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
    }
  },
  {
    "type": "Microsoft.Web/serverfarms",
    "apiVersion": "2015-04-01",
    "name": "[variables('hostingPlanName')]",
    "location": "[resourceGroup().location]",
    "properties": {
        "name": "[variables('hostingPlanName')]",
        "sku": "[parameters('sku')]",
        "workerSize": "[parameters('workerSize')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
    }
  },
 {
  "apiVersion": "2015-08-01",
  "name": "[parameters('appName')]",
  "type": "Microsoft.Web/sites",
  "kind": "functionapp",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "[resourceId('Microsoft.Web/serverfarms', parameters('appName'))]"
  ],
  "properties": {
     "serverFarmId": "[variables('appServicePlanName')]",
     "siteConfig": {
        "alwaysOn": true,
        "appSettings": [
            { "name": "FUNCTIONS_EXTENSION_VERSION", "value": "~1" },
            { "name": "Project", "value": "src" }
        ]
     }
  },
  "resources": [
     {
        "apiVersion": "2015-08-01",
        "name": "appsettings",
        "type": "config",
        "dependsOn": [
          "[resourceId('Microsoft.Web/Sites', parameters('appName'))]",
          "[resourceId('Microsoft.Web/Sites/sourcecontrols', parameters('appName'), 'web')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
          "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
          "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
        }
     },
     {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', parameters('appName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
            "branch": "[parameters('sourceCodeBranch')]",
            "IsManualIntegration": "[parameters('sourceCodeManualIntegration')]"
          }
      }
    ],
  "outputs": {
    "deployvnetResult": {
      "value": "[reference(concat('Microsoft.Network/virtualNetworks/', variables('vnetName')),providers('Microsoft.Network', 'virtualNetworks').apiVersions[0])]",
      "type" : "object"
    }
  }
}
